<?php

namespace BlogBundle\Repository;

use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends \Doctrine\ORM\EntityRepository
{
  public function getById($id)
  {
    try{
      $article = $this
        ->createQueryBuilder('p')
        ->where('p.id = :id')
        ->setParameter('id', $id)
        ->getQuery()
        ->getSingleResult();

        return $article;
    } catch (\Exception $ex){
         return null;
    }
  }

  public function getLastFive()
  {
    try{
      $articles = $this
        ->createQueryBuilder('p')
        ->orderby('p.postDate', 'DESC')
        ->getQuery()
        ->getResult();

        return $articles;
    } catch (\Exception $ex){
         return null;
    }
  }

  public function getList($page=1, $maxperpage=2)
  {
    $q = $this->_em->createQueryBuilder()
        ->select('article')
        ->from('BlogBundle:Article','article');

    $q->setFirstResult(($page-1) * $maxperpage)
      ->setMaxResults($maxperpage);
    return new Paginator($q);
  }

  public function getTotal()
  {
    try{
      $total = $this
        ->createQueryBuilder('q')
        ->select('count(q)')
        ->getQuery()
        ->getSingleScalarResult();

        return $total;
    } catch (\Exception $ex){
         return null;
    }
  }

  public function getListByCategory($page=1, $maxperpage=2, $category)
  {
    $q = $this->_em->createQueryBuilder()
        ->select('article')
        ->from('BlogBundle:Article','article')
        ->where('article.category = :category');

    $q->setParameter('category', $category);

    $q->setFirstResult(($page-1) * $maxperpage)
        ->setMaxResults($maxperpage);
    return new Paginator($q);
  }

  public function getTotalByCategory($category)
  {
    try{
      $total = $this
        ->createQueryBuilder('q')
        ->select('count(q)')
        ->where('q.category = :category')
        ->setParameter('category', $category)
        ->getQuery()
        ->getSingleScalarResult();

        return $total;
    } catch (\Exception $ex){
         return null;
    }
  }
}
